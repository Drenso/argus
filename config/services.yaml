# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  locale: 'en'

  database_password: '%env(string:key:database:json:file:resolve:SECRETS_FILE)%'

  env(COMMIT_HASH): '0'
  commit_hash: '%env(COMMIT_HASH)%'
  sentry_release: 'argus@%commit_hash%'

  env(HTTP_SCHEMA): 'https'
  router.request_context.host: '%env(HTTP_HOST)%'
  router.request_context.scheme: '%env(HTTP_SCHEMA)%'

  gitlab.url: '%env(GITLAB_URL)%'
  gitlab.token: '%env(string:key:gitlab_token:json:file:resolve:SECRETS_FILE)%'
  gitlab.webhook.secret-enabled: '%env(bool:GITLAB_WEBHOOK_SECRET_ENABLED)%'
  gitlab.webhook.secret: '%env(string:key:gitlab_webhook_secret:json:file:resolve:SECRETS_FILE)%'

  irker.server: '%env(IRKER_SERVER)%'
  irker.port: '%env(int:IRKER_PORT)%'
  irc.channel._default: '%env(IRKER_CHANNEL_DEFAULT)%'
  irc.channel.project: '%env(IRKER_CHANNEL_PROJECT)%'
  irc.channel.usage: '%env(IRKER_CHANNEL_USAGE)%'

  sentry.webhook.secret: '%env(string:key:sentry_webhook_secret:json:file:resolve:SECRETS_FILE)%'
  sentry.secret: '%env(string:key:sentry_secret:json:file:resolve:SECRETS_FILE)%'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  _instanceof:
    App\RemoteConfiguration\RemoteConfigurationInterface:
      tags: [ 'remote_configuration_service' ]
      lazy: true

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  App\Provider\Gitlab\Controller\:
    resource: '../src/Provider/Gitlab/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Provider\Gitlab\RemoteConfiguration\GitlabRemoteConfiguration:
    arguments:
      $gitlabWebhookSecretEnabled: '%gitlab.webhook.secret-enabled%'
      $gitlabWebhookSecret: '%gitlab.webhook.secret%'

  App\Provider\Gitlab\GitlabApiConnector:
    arguments:
      $gitlabUrl: '%gitlab.url%'
      $gitlabToken: '%gitlab.token%'

  App\Provider\Irker\EventHandlers\OutgoingIrcMessageEventHandler:
    arguments:
      $irkerServer: '%irker.server%'
      $irkerPort: '%irker.port%'
      $ircChannels:
        _default: '%irc.channel._default%'
        project: '%irc.channel.project%'
        usage: '%irc.channel.usage%'

  App\Provider\Sentry\Controller\:
    resource: '../src/Provider/Sentry/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Provider\Sentry\EventHandlers\SentryEventAlertEventHandler:
    arguments:
      $sentrySecret: '%sentry.secret%'

  App\Security\ArgusJwtAuthenticator:
    arguments:
      $jwtSecret: "%env(string:key:jwt_secret:json:file:resolve:SECRETS_FILE)%"

  App\Service\ProjectService:
    arguments:
      $remoteConfigurationServices: !tagged_locator { tag: 'remote_configuration_service' }
